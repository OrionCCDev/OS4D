# =====================================================
# Shared Hosting Configuration (No Redis/VPS Required)
# =====================================================
# This configuration works on shared hosting without
# Redis or WebSocket server. Uses AJAX polling fallback.
# =====================================================

# =====================================================
# Broadcasting Configuration (AJAX Fallback)
# =====================================================

# Use 'log' driver - system will automatically fallback to AJAX polling
BROADCAST_DRIVER=log

# =====================================================
# Queue Configuration (Database)
# =====================================================

# Use database for queues (works on all shared hosting)
QUEUE_CONNECTION=database

# =====================================================
# Cache Configuration (Database)
# =====================================================

# Use database for caching (no Redis needed)
CACHE_DRIVER=database
CACHE_PREFIX=app_cache_

# Alternative: Use file-based cache (also works well)
# CACHE_DRIVER=file

# =====================================================
# Session Configuration (Database)
# =====================================================

# Use database for sessions (better performance than files)
SESSION_DRIVER=database
SESSION_LIFETIME=120

# =====================================================
# Important Notes for Shared Hosting:
# =====================================================
#
# 1. The notification system will automatically use AJAX polling
#    - Polls every 30 seconds (configurable)
#    - No WebSocket connection needed
#    - Works perfectly for 50-100 users
#
# 2. Database caching provides good performance
#    - Faster than no caching
#    - No Redis needed
#    - Make sure to run: php artisan cache:table
#
# 3. Queue jobs process on page load
#    - No queue worker needed
#    - Jobs run in background via cron (optional)
#    - For better performance, set up cron job
#
# 4. When you upgrade to VPS in the future:
#    - Simply change BROADCAST_DRIVER to 'redis'
#    - Change QUEUE_CONNECTION to 'redis'
#    - Change CACHE_DRIVER to 'redis'
#    - Install Redis and start WebSocket server
#    - No code changes needed!
#
# =====================================================
# Optional: Cron Job for Queue Processing
# =====================================================
#
# Add this to cPanel Cron Jobs for better performance:
# */5 * * * * cd /home/yourusername/public_html/odc.com && php artisan schedule:run >> /dev/null 2>&1
#
# This will process queue jobs every 5 minutes
#
# =====================================================

# =====================================================
# No Redis Configuration Needed!
# =====================================================
# Since we're using database for everything,
# you don't need to configure Redis at all.
#
# The following Redis variables can be left as-is or removed:
# REDIS_CLIENT=phpredis
# REDIS_HOST=127.0.0.1
# REDIS_PASSWORD=null
# REDIS_PORT=6379
#
# =====================================================

# =====================================================
# Pusher/WebSocket Variables (Not Used with AJAX)
# =====================================================
# These can be left as-is. They won't be used when
# BROADCAST_DRIVER=log, but are here for future VPS upgrade
#
# PUSHER_APP_ID=12345
# PUSHER_APP_KEY=not-needed-for-ajax
# PUSHER_APP_SECRET=not-needed-for-ajax
# PUSHER_APP_CLUSTER=mt1
#
# VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
# VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
# VITE_PUSHER_HOST="${APP_URL}"
# VITE_PUSHER_PORT=6001
# VITE_PUSHER_SCHEME=http
#
# =====================================================
